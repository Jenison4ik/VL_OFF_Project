"use client";

import { useEffect, useState, useCallback, useMemo } from "react";
import { mixColors } from "@/utils/colorUtils";
import type { BlackoutByBuilding } from "@/types/Blackout";

/**
 * –¢–∏–ø —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–º–∏—Ç—Ç–µ—Ä–∞
 */
type EmitterEvent = { type: "closeAll" } | { type: "closeExcept"; id: string };

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ BlackoutMarker
 */
interface BlackoutMarkerProps {
  id: string;
  data: BlackoutByBuilding;
  Marker: React.ComponentType<any>;
  emitter: {
    subscribe: (fn: (e: EmitterEvent) => void) => () => void;
    publish: (e: EmitterEvent) => void;
  };
  recordInteraction: (id: string) => void;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ —Å popup'–æ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
 */
export default function BlackoutMarker({
  id,
  data,
  Marker,
  emitter,
  recordInteraction,
}: BlackoutMarkerProps) {
  const [open, setOpen] = useState(false);

  // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  const colorByType = {
    electricity: "#f5841b",
    cold_water: "#0a12f5",
    hot_water: "#f50a0a",
    heat: "#0af531",
  };

  // –¢–µ–∫—Å—Ç –¥–ª—è popup'–∞ –ø–æ —Ç–∏–ø—É
  const typesText = new Map([
    ["electricity", "‚ö° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞"],
    ["cold_water", "‚ùÑÔ∏èüíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã"],
    ["hot_water", "üî•üíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã"],
    ["heat", "üî• –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è"],
  ]);

  /**
   * –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.
   * –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ.
   */
  const { mixedColor, blackoutElements, blackoutText } = useMemo(() => {
    const types = data.blackouts.map((item) => item.type);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
    const blackoutElements = data.blackouts.map((item, index) => (
      <strong key={`${item.type}-${index}`}>{typesText.get(item.type)}</strong>
    ));

    // –°–º–µ—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
    let mixedColor = colorByType[types[0]];
    for (let i = 1; i < types.length; i++) {
      mixedColor = mixColors(mixedColor, colorByType[types[i]], 0.5);
    }

    const blackoutText = data.blackouts.map((item, index) => {
      return (
        <span key={`${item.type}-${index}`}>{"‚Äî  " + item.description}</span>
      );
    });

    return { mixedColor, blackoutElements, blackoutText };
  }, [data.blackouts]);

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è emitter'–∞: –∑–∞–∫—Ä—ã—Ç–∏–µ popup'–æ–≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.
   */
  useEffect(() => {
    const unsubscribe = emitter.subscribe((event) => {
      if (
        event.type === "closeAll" ||
        (event.type === "closeExcept" && event.id !== id)
      ) {
        setOpen(false);
      }
    });
    return unsubscribe;
  }, [emitter, id]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É.
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç popup –∏ —Å–æ–æ–±—â–∞–µ—Ç –¥—Ä—É–≥–∏–º –º–∞—Ä–∫–µ—Ä–∞–º –∑–∞–∫—Ä—ã—Ç—å—Å—è.
   */
  const handleMarkerClick = useCallback(
    (e?: any) => {
      setOpen(true);
      emitter.publish({ type: "closeExcept", id });
      recordInteraction(id);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–ø–ª—ã—Ç–∏–µ
      e?.originalEvent?.stopPropagation?.();
    },
    [emitter, id, recordInteraction]
  );

  return (
    <Marker
      onClick={handleMarkerClick}
      coordinates={[
        parseFloat(data.coordinates[1]),
        parseFloat(data.coordinates[0]),
      ]}
      size="micro"
      color={{
        day: mixedColor,
        night: "#00ff00", // –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–µ–º—É
      }}
      popup={{
        show: open,
        content: () => (
          <div
            style={{
              padding: "6px 10px",
              background: "#fff",
              fontSize: 14,
              lineHeight: 1.4,
            }}
          >
            {blackoutElements.map((el, i) => (
              <p key={i}>{el}</p>
            ))}
            <div>
              {blackoutText.map((el, i) => {
                console.log(1);
                return <p key={i}>{el}</p>;
              })}
            </div>
          </div>
        ),
      }}
    />
  );
}
